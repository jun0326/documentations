1、特点
可以以jar包的形式独立运行
内置tomcat jetty、undertow
提供一系列start组件


springBoot_Demo1
父工程

2.启动自动配置
3.自定义banner
4.全局配置参数
5.start pom
6.获取自定义配置的值
@Value
7.类型安全的配置
@ConfigurationProperties(prefix = "book") //基于类型安全的取值
application.properties
get set 方法
8.profile配置
application-prod.properties 
application-sit.properties
application-dev.properties

通过
application.properties  
spring.profiles.active=dev
9.自动配置原理
读取spring-meta配置文件

10.创建父工程
子工程

11.springBoot整合测试
@SpringBootTest(classes = SpringBootController.class)
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
public class SpringBootControllerTest {

    @Autowired
    private SpringBootController springBootController;

    @Test
    public void test01(){
        TestCase.assertEquals(this.springBootController.yes(),"hello");
    }
}

12、@springbootAplication 和 restController
启动类 restcontroller rest风格

13、springboot日志管理
日志级别 7个
trace debug info warn error fatal off
2中设置方式
logging.flie
logging.path
只能设置其中一种，如果2者都使用了，则只有logging.file生效
14、自定义配置文件
官方推荐使用-spring的文件名作为日志配制


15.logger使用

16.多环境日志输出

17.LOG4J使用

18、自动部署

19、springboot web开发
web包自动配置代码查看   autoConfiguration包下面查看

20.访问静态资源

21.自定义消息转化器

22.使用Fastjson解析json

配置F
配置Fastjson2中使用方式
启动类继承 WebMvcConfigurerAdapter
重写 configureMessageConverters 方法
第二种方式@Bean

23.自定义拦截器
继承 WebMvcConfigurerAdapter

24.定义全局异常处理器

25.异步调用
在项目中，当访问其他接口较慢或耗时任务时，不想程序一直卡在耗时任务上，可以使用多线程处理任务
springboot提供了异步处理的功能

26.在springBoot中使用jsp
官方不推荐使用jsp

27、springboot整合freemarker 
推荐使用模板引擎

28、springboot 整合thymeleaf

29、springboot 整合quartz
30、springboot 整合jdbcTemplates
31、springboot 整合mybatis
32、springboot 整合mybatis 注解

33、区分多数据源
如何区分多个数据源：
通过包来区分：com.db1.mapper com.db2.mapper
使用注解来区分

34、多数据源实现  --看了，未实操
通过读取配置文件、创建不同的包，在mapper注入不同的数据源，创建datasource
通过读取配置文件、创建不同的包，在mapper注入不同的数据源，创建datasource


35、事物管理
servcie 类中加  @Transactional
或者 方法中加  @Transactional


36、spring整合 hibernate jpa  --未看
37、spring整合 mail  --未看

38、spirngboot实现文件上床
39、springbot 实现文件批量上传

40、springboot整合neo4j nosql图形数据库 --未看
41、打包发布到独立的tomcat
1、需要打成war包
2、不需要把starter-tomcat 打包包中
使用<scope>provided</scope>
3、启动类继承SpringBootServletInitial
继承SpringApplicationBuilder


42、springboot整合redis

43、springboot整合redis集群

配置JedisCluster对象 Configura

--==========================================================
springBoot微服务开发开发环境搭建
1、pom.xml文件 
	1、引入parent文件，确定了引入文件版本号
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-parent</artifactId>
			<version>2.1.5.RELEASE</version>
		</parent>
	2、引入dependencyManagement标签，确定了引入文件版本号
		<dependencyManagement>
			<dependencies>
				<dependency>
					<!-- Import dependency management from Spring Boot -->
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-dependencies</artifactId>
					<version>2.1.5.RELEASE</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>
	3、指定jdk编译版本和编码方式
		<properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<!--标准maven方式指定jdk版本-->
			<!--<maven.compiler.source>1.8</maven.compiler.source>-->
			<!--<maven.compiler.target>1.8</maven.compiler.target>-->
			<!--springboot专用方式-->
			<java.version>1.8</java.version>
		</properties>
	4、引入web启动器
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
	5、引入mybatis启动器
		<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.1</version>
        </dependency>
	6、引入mysql驱动包或者oracle驱动包
		 <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <!--<version>5.1.44</version>-->
        </dependency>
	7、引入alibaba的数据库连接
		 <!-- alibaba的数据库连接池 springboot 2.x以上的，要使用1.1.13-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <!--<version>1.1.0</version>-->
            <version>1.1.13</version>
        </dependency>
	8、引入单元测试包
		 <!--测试包-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
		
2、application.yml文件
	1、服务器，默认使用tomcat
		server:
			port: 8080
	2、配置使用数据库连接和数据源信息
		spring:
		  datasource:
			name: test
			url: jdbc:mysql://127.0.0.1:3306/springBoot
			username: root
			password: 113113
			# 使用druid数据源
			type: com.alibaba.druid.pool.DruidDataSource
			driver-class-name: com.mysql.jdbc.Driver
			filters: stat
			maxActive: 20
			initialSize: 1
			maxWait: 60000
			minIdle: 1
			timeBetweenEvictionRunsMillis: 60000
			minEvictableIdleTimeMillis: 300000
			validationQuery: select 'x'
			testWhileIdle: true
			testOnBorrow: false
			testOnReturn: false
			poolPreparedStatements: true
			maxOpenPreparedStatements: 20
	3、配置整合mybatis信息，配置mapper文件路径，和实体类中的包
		# mybatis节点为独立的节点
		mybatis:
		  mapper-locations: classpath:/mybatis/mappering/*.xml # 配置mapper文件路径
		  type-aliases-package: cn.jun.entity # 实体类中的包
		  configuration:
				log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 控制台打印日志
				
3、文件目录路径以及用到的注解
	1、java
		controller
			@Controller
			@RestController
			@RequestMappping("/user")
			@RequestMapping(value = "/selectByName",method= RequestMehtod.POST,produces="application/json;charset=utf-8")
			@Autowired
			@Resource
			@RequestBody 表示传入的参数转为json格式
				 public RespEntity selectByUserName(@RequestBody ReqUser reqUser) {
					System.out.println(reqUser);
					List<User> users = userService.selectByUserName(reqUser);
					return new RespEntity(RespCode.SUCCESS,users);
				}
			@PathVariiable 绑定传入的参数
				@RequestMapping(value = "/get/{id}", method = RequestMethod.GET, produces = "application/json;charset=utf-8")
				public User selectByPrimaryKey(@PathVariable("id") Integer id) {
					return userService.selectByPrimaryKey(id);
				}
		service
			@Service
			@Transactional
			@Autowired 或者 @Resource
		mapper
			@Mapper
			@Param 绑定参数
		entity
			repEntity
			respEntity
			Entity
				@Repository
		SpringApplicationStart
			@SpringApplication
	2、resources
		genterator
		mybatis
			mappering
		static
		application.yml
		
4、单元测试
	用到的注解
	@RunWith(SpringJUnit4ClassRunner.class)	指定测试类
	@SpringBootTest(classes = SpringApplicationStart.class) 指定开启的启动类，如果不需要使用到上面的jar包，也可以不启动
	
	@RunWith(SpringRunner.class)
	@SpringBootTest
5、整合redis
	1、pom.xml配置启动器
		!--添加redis启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
	2、application.yml加入配置
		 #配置redis连接信息
		 spring:
		  redis:
		  host: 127.0.0.1
		  port: 6379
		  password:
			  jedis:
				pool:
				  max-active: 8
				  max-wait: -1
				  max-idle: 500
				  min-idle: 0
			  lettuce:
				shutdown-timeout: 0
	3、使用RedisTemplate模板使用操作redis
	 authCheckUtils.redisTemplate.opsForValue().set(sign.getAppid(),sign.getSignature());
		
		
		
	

		