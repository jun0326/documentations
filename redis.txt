高性能key-value 服务器
多种数据结构
分布式高可用

学习技术
linux
数据结构
一门编程语言

redis是什么
1、开源
2、基于键值对的存储服务系统
字符串 哈希 列表 集合 有序集合
string hash linedLists Sets Sorted Sets
redis的特性回顾
redis单机安装

谁在使用Redis
GitHub
twitter
stackoverflow  --精准回答
阿里
百度
微博
美团
搜狐

Redis的特性
1、速度快
1秒读10w数据，
数据存在哪里 -- 内存中
什么语言实现 -- c
线程模型 -- 单线程
持久化（断电不丢失数据）
redis所有数据保存咋内存中，对数据的更新将异步地保存到磁盘上。
多种数据结构
string hash linedLists Sets Sorted Sets
位图、超小内存唯一值计数、地理信息定位
支持多种编辑语言
发布订阅、Lua脚本
简单
不依赖外部库、单线程模型
主从复制
从服务器可以从主服务器复制数据
高可用、分布式

高可用 redis-sentinel
分布式 redis-cluster

redis典型应用场景
1、缓存系统
2、计数器
3、现象队列系统
4、排行榜
5、社交网站
6、实时系统

redis安装linux
三种启动方式
最简单启动
redis-server
动态参数启动 
redis-server -port 8080
配置文件启动 
redis-server configure

redis客户端返回值
状态恢复 --ping pong
错位回复  error
整数回复
字符串回复
多行字符串回复

redis常用配置
daemonize  是否是守护进程方式启动 （no\yes） 推荐yes
prot redis对外端口 默认端口6379
logfile redis系统日志
dir redis工作目录


通用命令
keys *  遍历出所有的key
dbsize  获取key的总数
exists key 检查是否存在该key
del key 删除指定的key

expire key seconds key在多少秒过期
ttl key 查看key剩余的过期时间 （-2表示key已经被删除）
persist key 去掉key的过期时间  
type key 返回key的类型
时间复杂度

数据结构和内部编码
原理是时间换空间或者空间换时间

单线程
单线程为什么这么块
1、纯内存
2、非阻塞io
3、避免线程切换和竞态消耗

单线程要注意什么
1、一次只运行一条命令
2、拒绝长（慢）命令
3、其实不是单线程

redis api的使用和理解

字符串 
not up to 512MB
场景 缓存 分布式锁 计数器 

结构和命令
get set del
incr 增加
decr 减去
incrby decrby 

set 是否存在都会操作
setnx 没有才会操作
set xx 有才会操作

mget  批量操作
mset  批量设置
getset 
append 追加
strlen value  返回长度

快速实战
计时器：记录网站每个用户个人主页的访问量
缓存视频的基本信息（数据源在mysql中）
分布式id生成器（原子单线程）

内部编码

查漏补缺


hash 哈希
特点

key field values
field 不能相同
values 可以相同

hget
hset
hdel
hexists
hlen
hmget
hmset
hgetall key 返回所有的key
hvals key

实战
记录网站每个用户个人主页的访问量？
缓存视频的基本信息（存储在mysql中）
用户信息（string实现）
用户信息（string实现）
用户（hash）

列表 list
特点
key elements
有序 可以重复 左右两边插入弹出
重要api
linsert key befor|after
lpop
rpop
lrem
lrem key count value
ltrim key start end

查
lrange
lindex
lset

实战
timeline
tips
lrush + lpop = stack
lpush + rpop = queue
lpush + ltrim = capped collection
lpush + brpop = message queue

集合 set
集合结构
key values

appi
sadd
srem
sinter
sdiff
sunion
特点
无序
不能插入重复的元素
集合操作

实战
抽奖系统
like、赞、踩

集合间API
标签

有序集合
特点
重要api
实战
查漏补缺

--=======================
redis 客户端
java客户端：jedis

获取Jedis
引用maven依赖
1、jedis直连
生成jedis对象

1、string
set get incr 
2、hash
3、list
rpush lrange
4、set
5、zset

jedis连接池使用
jedis直连
jedis连接池
优缺点

jedis基本使用

go客户端

--=========================
瑞士军刀Redis
慢查询
生命周期
1、发送命令 2、排队 3、执行命令 4、返回结果
慢查询发生在第三阶段
客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素
2个配置 -slowlog max len 
1、先进先出队列
2、固定长度
3、保存在内存内
慢查询命令
运维经验
slowlog-max-len
slowlog-log-slower-than不要设置太小


pipeline
什么流水线
批量执行
网络

客户端实现
pipeline 在 java中执行
提高速度
原生命令
使用注意：
注意每次pipeline携带数据量
pipeline每次只能作用在一个redis节点上
M操作与pipeline区别

发布订阅
角色 
发布者 订阅者 频道
模型
服务器客户端  
无法找到历史信息
api
发布者发送信息时，会返回订阅者数量

消息队列模型
抢占式


Bitmap
位图
字符春big对应的二进制码

api
setbit
getbit
bitcount
bitpo
bitpos

独立用户统计
数据类型
set
bitmap  需要存储空间小
type=string 最大512m
注意 bitmap如果偏移量大，耗费时间长

HyperLogLog
算法：极小空间完成独立数据统计
本质还是字符串

内存消耗（百万独立用户）
消耗内存小

GEO是什么
GEO(地理信息定位)：存储经纬度，计算两地距离、范围计算等

api

-===============================
redis持久化
持久化作用 rdb 
aof
rdb和aop的抉择

持久化作用
什么是持久化
redis所有数据都是存在内存中的，对数据的更新将异步地保存到磁盘中
持久化的实现方式
快照
mysql rdb
写日志
hbase aof

rdb
什么是rdb
redis(内存) --> rdb文件（二进制）（硬盘）
重启redis
rdb（文件） --> 内存


save(命令) 同步 阻塞
bgsave(命令) 异步 阻塞（发生在fork）



--====
rdb 耗时好性能 丢数据，不可控

aof 日志文件
aof三种处理策略
always 写命令刷新的缓冲区 每条命令fsync
不丢数据 io开销大
everysec
每一秒fsyn丢1秒数据 
no

aof重写
原生aof 
aof重写
作用：减少硬盘占用量 加速恢复速度

aof重写实现两种方式
bgrewriteaof命令
aof重写配置
自动触发时机

aof  配置实验文件

rdb和aof的选择

启动优先级 低 高
体积 小  大
恢复速度 快 慢
数据安全性 丢数据 根据策略决定
轻重 重 轻

rdb最佳策略 关 集中管理 主从 从开 
aof最佳策略：开 缓存和存储 aof重写 everysec
最佳策略 小分片  缓存或者存储 
监控（硬盘、内存、负载、网络） 
足够的内存

开发运维常见问题
1、fork操作
fork操作是同步操作
与内存量息息相关：内存越大、耗时越长
info：latest_fork
改善fork:
优化使用物理机或者高效支持fork操作

2、子进程开销和优化
cpu
开销：rdb和aof文件生成，属于cpu密集型
优化：不做cpu绑定，不和cpu密集型部署
内存：
开销：fork内存开销，copy-on-write
优化
3、硬盘优化
4、aof追加阻塞

--==================
redis复制的原理与优化
什么是主从复制
单机有什么问题
机器故障 高可用问题
容量内存
QPS瓶颈

master节点 slave节点
一主多从
主从复制作用
数据副本
扩展读性能
一个master可以有多个slave
一个slave只能有一个master
数据流向是单向的

2种实现方式
命令实现
修改配置
优缺点
命令 无需重启 统一配置

实操
全量复制和部分复制

复制偏移量 

全量赋值
psync ? -1 
全量赋值到slave

全量赋值开销 
1、bgsave时间 
2、rdb文件网络传输时间
3、从节点清空数据时间
4、从节点加载rdb的时间

部分数据
全量复制有可能部分丢失

故障处理
故障转移 保证高可用
读写分离
slave宕掉
master宕掉

开发与运维中的问题
1、读写分离
读流量分摊到从节点
可能遇到问题
复制数据延迟
读到过期数据
从节点故障
2、主从配置不一致
丢失数据
规避全量赋值
第一次不可避免
小主节点、低峰

节点运行ID不匹配
主节点重启（运行ID变化）
故障转移

赋值积压缓冲区不足
网络中断，部分复制无法满足


规避复制风暴
单主节点复制风暴
单机器复制风暴

-=======
redis sentinel --高可用架构

主从复制高可用 
备份、分流
主从复制高可用存在的问题
手动故障转移、写能力和存储能力受限
架构说明
redis sentinel架构三个节点
安装与配置

客户端连接sentinel
直连
服务端高可用和客户端高可用
客户端接入流程

故障转移演练
日志查看
三个定时任务
每10秒每个sentinel对master和slave执行info
发现slave节点
主观下线和可观下线
每个sentinel节点对redis节点失败的偏见
可观下线：所有sentinel

领导者选举

故障转移（sentinel领导者节点完成）
选择slave-priority(slave节点优先级)最高的slave节点

常见的开发和运维问题
节点运维
机器下线：例如过保等情况
机器性能不足：例如CPU、内存、硬盘、网络等
主节点
从节点:临时下线还是永久下线，例如是否做一些清理工作

高可用读写分离

本章回顾总结
redis sentinel是Redis的高可用实现方案
故障发现、故障自动转移、配置中心、客户端通知
redis Sentinel中的节点个数应该大于等于3

--=======================
redis cluster 
呼唤集群
10万每秒，业务需要100万每秒
机器内存：16-256g,业务需要500g?
解决方法：超大内存，更好的cpu
正确的解决方法：分布式：简单的认为是加机器
数据分布
分布式数据库：数据分区
顺序分区和哈希分区
1、节点取余分区
节点迁移
多倍扩容

2、虚拟槽分区
预设虚拟槽：每个槽映射一个数据子集

搭建集群
基本架构
1、单击架构 
2、分布式架构
redis cluster 架构说明
节点、meet、指派槽、复制

meet

cluster安装
原生命令安装
1、配置开启节点
2、meet
3、节点主要配置 cluster-enabled yes
cluster-node-timeout 15000
cluster-config-file nodes.conf
分配槽

--ruby环境安装
下载、编译、安装ruby

1、原生命令安装
生产环境不适用

2、官方工具安装

3、其他
可视化部署

集群伸缩
伸缩原理
伸 扩展 


扩容集群
准备新节点
加入集群 meet tri.ib 使用官方工具
迁移槽和数据 

收缩集群
下线迁移槽
忘记节点

集群缩容操作

客户端路由
moved重定向
redis-cli -c -p 7000
ask重定向
原因slot迁移
追求性能
smart客户端
JedisCluster
JedisCluster基本使用
设置一个Set集合
使用技巧
单例
整合spring

多节点命令实现
如何实现批量操作
1、串行mget
2、串行IO
3、并行io
4、hash_tag 
故障转移
1、故障发现
主观下线、客观下线
2、故障恢复
资格检查
准备选举时间
选举投票
替换主节点
3、故障演练
1、执行kill -9 

reids Cluster开发运维常见问题
1、集群完整性
cluster-require-full-coverage 默认为yes
大多数业务需求的建议是设置为no
2、宽带消耗
官方建议：不超过1000个节点
ping/pong消息
优化：
避免“大”集群：避免多业务使用一个集群，大业务可以使用多集群
宽带和故障
3、pub/Sub广播
问题：publish在集群每个节点广播

集群倾斜
4、数据倾斜
数据倾斜：内存不均
5、请求倾斜
热点key:重要的key或者bigkey
优化：
避免bigkey
热键不要用hash_tag
当一致性不高时
6、集群读写分离
只读连接：集群模式的从节点
7、数据迁移
离线和在线迁移
1、官方迁移工具：redis-trib.rb import
只能从单击迁移到集群

2、在线迁移

集群和单机的对比
集群限制：
key批量操作支持有限：例如mget、mset必须在一个slot
key事物和lua支持有限
分布式redis不一定好
redis cluster:很多业务不需要

redis cluster数据分区规则采用虚拟槽方式

集群原理
开发运维常见问题
--====================
缓存的使用与设计
缓存的受益与成本
1、加速读写
成本
1、数据不一致
2、代码维护成本：多了一层缓存逻辑
3、运维成本：例如Redis cluster
使用场景：
1、降低后端负载
2、加速请求响应
3、大量写合并为批量写

缓存更新策略
1、LRO/LFU/FIFO算法剔除
2、超时剔除：例如expire
3、主动更新：开发控制生命周期

两条建议
1、低一致性：最大内存和淘汰策略
2、高一致性

缓存粒度控制
1、从mysql获取用户信息
2、设置用户信息缓存
3、缓存粒度
全部属性
部分重要属性

1、通用性：全量属性更好
2、占用空间：部分属性更好
3、代码维护：表面上全量属性更好

缓存穿透问题
原因：
1、业务代码自身问题
2、恶意攻击、爬虫等等
如何发现问题
1、业务相应时间
2、业务本身问题
3、相关指标
解决问题
1、缓存空对象
2个问题
1、需要更多的键
2、缓存层和存储层数据“短期” 不一致。

2、布隆过滤器拦截

缓存无敌洞问题描述
问题描述：
2010年，facebook
优化IO的几种方法
命令本身优化
减少网络通信次数
降低接入成本

热点key重建优化
问题描述：热点key+较长的重建时间
三个目标
2个解决
互斥锁
永远不过期

缓存收益：加速读写，降低祸端存储负载。

--==============
redis云平台cacheCloud
redis规模化运维
发布构建繁琐，私搭乱盖
节点&机器等运维成本
架空报警初级

快速构建
二进制文件：直接启动
机器部署：
机器添加部署脚本：ssh账号、Redis安装部署
应用接入
用户功能
运维功能






--常用命令
清空当前库中所有的key flushdb


一、redis是单线程，主要利用内存存储数据，所以速度快，1s可以读10万条数据。
二、redis的数据结构主要是键值对类型，存储数据的类型有string(字符串)、hash(哈希)、lists(列表)、set(集合)、zset(sorted set 有序集合)
三、支持高可用、支持分布式
四、持久化，redis数据存储在内存中，会通过异步的方式将数据放到磁盘中
持久化的策略：
rdb，通过快照的方式
aof：通过日志文件的方式
rdb优势：体积小、速度快 弱势：丢数据、重
aof优势：不易丢数据（根据策略决定）、轻 弱势：速度慢  体积大
启动优先级 低 高
体积 小  大
恢复速度 快 慢
数据安全性 丢数据 根据策略决定
轻重 重 轻

如何保证redis和数据库的一致性？



 