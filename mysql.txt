1、Mysql Server
	1、Connectors 连接层
		1、客户端连接
		2、验证授权
		3、引入连接池概念
	2、服务层
		1、management备份、安全、赋值、集群
		2、视图、存储过程、触发器
		3、对象权限、查询事物
		4、自带优化器
		5、缓存
	3、引擎层
		1、常用的MyISAM,InnoDB
		2、不同的存储引擎擅长的操作不同
	4、存储层
	为什么做分层？
	答：哪个地方出问题，找哪个地方
2、存储引擎
	1、存储引擎的概念
		不同的技术以及配套的相关功能在MySQL中被称做存储引擎
		查看存储引擎：SHOW ENGINES;
		查看存储引擎：SHOW VARIABLES LIKE '%storage_engine%';
	2、主外键：
			MyISAN 不支持
			InnoDB 支持
		事物
			MyISAN 不支持
			InnoDB 支持
		行表锁
			MyISAN 表锁
			InnoDB 行锁
		缓存
			MyISAN 只缓存索引，不缓存数据
			InnoDB 不仅缓存索引，还要缓存真实数据，对内存要求比较高，而且内存大小对性能有决定性的影响
		表空间
			MyISAN 小
			InnoDB 小
		关注点
			MyISAN 性能高
			InnoDB 事物
		默认安装
			MyISAN 
			InnoDB 创建表默认是InnoDB
		文件结构
			MyISAN 
				b.frm:描述表结构文件，字段长度等
				b.MYD(MYData):数据信息文件，存储数据信息（如果采用独立表存储模式）
				b.MYI(MYIndex):索引信息文件
			InnoDB 创建表默认是InnoDB
				b.frm：描述表结构文件，字段长度等
				b.ibd：存储数据信息和索引信息
3、SQL执行的顺序
	from on join where group by having select distinct 字段 order by limit
	
4、JOIN连接
	1、内连接
		inner join  查询两张表交集
	2、右连接
		rgiht
		右表的数据全部查出来，左表满足条件的查出来
	3、左连接
		left join 
		左表的数据全部查出来，右表满足条件的查出来
	4、查询左表独有数据
		left join  + where 右表字段 is null
	5、查询右表独有数据
		right join  + where 左表字段 is null
	6、全连接
		full outter join oracle 支持
		
		左连接
		union 
		右连接
	7、查询左右表各自的独有数据
		查询左表独有数据
		union
		查询右表独有数据

5、优化分析
	1、性能下降的原因
		1、查询语句写的不好，各种连接，各种子查询用不上索引或者没有建立索引
		2、建立的索引失效，
		3、关联查询太多join
		4、服务器调优及各个配置参数导致
	如何写出高质量的sql
	如何保证新建的索引不失效
	
	2、什么是索引
		帮助Mysql高效获取数据的数据结构，索引就是数据结构
		排好序的快速查找数据
		
		为什么要建立索引
			提高查询效率
				排好序之前一个一个往后找
				通过索引进行排序之后，可以直接定义到想要的位置
			排好序的快速查找数据结构 --《 就是索引
		优势：
			1、提高数据检索的效率，降低数据库的IO成本
			2、通过索引对数据进行排序，降低数据排序成本，降低了CPU的消耗
		差势：
			1、索引本身也很大，索引往往以文件形式存储到磁盘上
			2、索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引也是要占磁盘空间。
			3、索引提高了查询速度，但是会降低更新表的速度，因为更新表时，Mysql不仅要保存数据
			还要保存一下索引文件每次更新添加了索引列的字段，会调整因为更新所带来的键值变化索引的信息。
			
	3、索引分类：
			单值索引：
			唯一索引：
			符合索引：
			全文索引：mysql全文检索是利用查询关键字和查询列内容之间的相关度进行检索，可以利用全文索引来提高匹配的速度。
			
	4、	索引为什么能提高查询效率
		1、为了加快数据查找，可以维护二叉查找树，每个节点分别包好索引键值和一个指向对应数据记录的为u里地址的指针。
		2、平时所说的索引没有特别指定，都是指B树结构组织的索引。
		
		二叉树
		左小右大
		3阶B树
			关键字左边比右边小
			一个节点中关键字比孩子少一个
			所有叶节点在同一层
			关键字排序是左中右
		B+树
6、创建索引
	create index cus_idx on employee(cus_id);
	在创建表的时候就要创建索引
	show index from employee;  在innodb 中创建索引是btree
	删除索引 
	drop index cus_id on employee;
	更改索引
	alter
7、什么情况建立索引
	1、主键主动建立索引 primary;
	2、频繁作为查询条件的时候；
	3、查询中与其它表关联的字段，外键关系建立索引；
	4、频繁更新的字段不适合建立索引，每次更新不单单更新数据，还要更新索引。
	5、where条件里用不到的字段不建立索引
	6、查询中排序的字段，排序的字段若通过索引去访问将大提升排序速度
	7、查询中统计或分组的字段，分组的前提是必须排序。
	不适合建立索引
		1、经常增删改的表
			1、索引提高了查询的速度
			2、同时却会降低更新表的速度，如果对表的INSERT、UPDATE和DELETE
			3、因为建立索引后，更新表时，MYSQL不仅要保存数据，还要保存一下索引文件
			4、数据重复的表字段：比如表中的某一个字段为国籍，性别
			数据的差异率和重复率不高，这种建立索引的就没有太多意义
8、表设计准则
	满足关系数据库的三范式：
		1、是指数据表的每一列都是不可分割的基本数据项，同一列中不能有多个值，关系型数据库都遵循
		2、要求数据库表中的每个实例或行必须可以被唯一区分，要求设置主键
		3、要求一个数据库表中不包含已在其他表中已包含的非主关键字信息
			两张表不要设置重复的字段，通常都是设置外键
		
		大表拆小表，有大数据的列单独拆成小表
			1、在一个数据库中，一般不会设计属性过多的表
			2、在一个数据库中，一般不会有超过500/1000万数据的表 拆表
			3、有大数据的列单独拆成小表（副文本编辑器）
9、DQL执行的查询过程
		sql语句 --> 查询缓存 --> 解析器  --> 预处理 --> 解析树 --> 预处理 --> 解析树 --> 查询优化器 --> 查询执行计划 --> 查询执行引擎 --> api接口调用 --> 存储引起（数据）
		--> 结果 --> 缓存	
		自己优化查询sql,自己优化查询方案，让查询优化器按照程序员的方案执行sql

10、MYSQL常见瓶颈 
		CPU饱和
		磁盘I0读取数据大小
		服务器硬件比较低
		
		查询执行计划
			使用explain关键字，可以模拟优化器执行的SQL语句
			从而知道MYSQL是如何处理sql语句的
			通过Explain可以分析查询语句或表结构的性能瓶颈
			
		作用
			1、查看表的读取顺序
			2、数据读取操作的操作类型
			3、查看哪些索引可以使用
			4、查看哪些索引被实际使用
			5、查看表之间的引用
			6、查看每张表有多少行被优化器执行
	
	explain SELECT * FROM account_base_info;
	id
		select查询的序列号
		包含一组数字，表示查询中执行select子句或操作表的顺序
		值的三种情况
			id相同
				表示顺序由上到下
			id不同
				从大到小顺序执行，id值越大优先级越高，优先被执行。
			id相同不同，同时存在。
				结合上面2种情况
	select_type
		1、simple	单表简单查询
		2、primary	子查询外层的
		3、SUBQUERY 子查询
		4、derived 衍生表，group by之后把结果放在临时表
		5、union union字段
		6、union result 表示union结果表展示的结果表
	type 访问表的类型
	1、system 表中有一行记录（系统表），这是const类型的特例，平时不会出现
	2、const 
		表示通过索引一次就找到了，
		const用于比较primary或者unique索引，
		直接查询主键或者唯一索引，
		因为只匹配一行数据，所以很快
	3、eq_ref 
		唯一性索引扫描，
		对于每个索引键，
		表中只有一条记录与之匹配
		常见于主键或唯一索引扫描
	4、ref 
		非唯一性索引扫描
		返回匹配某个单独值的所有行
		本质上也是一种索引访问
		它返回所有匹配某个单独值的行
		可能会找到多个符号条件的行
		所以它应该属于查找和扫描的混合体
	5、range
		范围查找
	6、index 
		 查询有索引的列
	7、All
		全表扫描
	possible_keys
		可能会用上的索引
	keys
		实际上用到的索引
	key len
		可以看是否被引用到
	ref
		索引引用到其他表的字段
		const 常量
		itlike.c.name, const
	rows
		表示扫描的行数
	filered
		百分数，值越大越好
	Extra
		Using filesort  --需要优化
			说明mysql会对数据使用一个外部的索引排序
			而不是按照表内的索引进行
			Mysql中无法利用索引完成排序操作称为“文件排序”
		Using temporary --用到临时表 --需要优化
		use index
		using where 
		using join buffer 使用了连接缓存
		impossible where 
			子句的值总是false不能用来获取任何元素  --需要优化
	
	paritions 分区

11、索引失效
		
		复合索引
			全值匹配(最好)
			最佳左前法则
				1、第一个去掉，索引全部失效
				2、中间一个去掉，第一个索引用上
				3、三个存在，但是调了顺序，索引还是可以用上
				4、跳过前两个，索引全部失效
			不再索引上做任何操作
				1、索引上用一些函数会造成索引失效
			范围条件下导致右边索引失效
			mysql使用<>会造成索引失效
			is not null 会造成索引失效
			使用or会造成索引失效
			like通配符也会造成索引失效 'a%'(有效) '%a'(无效)
			字符串通配符 '200'(有效) 200 无效
			尽量使用覆盖索引
				查询的字段和建立索引的字段刚好吻合，这种称为覆盖索引
12、排序优化和分组优化
	1、使用order by 造成 Using filesort，需要优化
		1没有按照索引的顺序
		2当使用了*的时候
		3当索引字段为常量时，可以当作是存在索引的
		4使用排序一升一降会造成filesort
	2、使用group by 造成 Using temporary，需要优化
		1、按照索引的顺序做分组
13、大量数据的时候是如何分页的
	1、使用子查询优化分页，子查询走索引
	select * from employ limit 990000,10;
	优化一
	select * from employ a inner join 
	(select id from employ limit 990000,10) b on a.id = b.id 
	优化二
	select * from employ a where id >= 
	(select id from employ limit 990000,1) limit 10;
	2、使用id限定优化,限制只能使用与明确知道id的情况
	select * from employ where id > 990000 limit 10;
	select * from employ where id between 990000 and 9900010 limit 10;
	
14、max优化
	使用索引进行优化
15、使用count方式
	count(*) 包含 null
	count(name or name is null) 才会包含null
16、小表驱动大表
	小表先查询，大表再查 
17、in和exists区别
	1、当A表中数据多于B表中的数据时，使用IN优于exists
	2、当B表中数据多于A表时，我们使用EXists优于IN
	3、因此是使用IN,还是使用EXISTS,由需求来决定，2张表数据差不多的时候，使用IN或者Exists区别不大
	4、Exists子查询只返回true或false,因此子查询中的SELECT * 可以是Select或者其他
	
18、锁的概念
	锁是协调多个进程或者线程并发访问某一资源的一种机制
	锁的分类
		读锁（共享锁）
		写锁（排它锁）
	按粒度分
		表锁
			偏向MYISAM存储引擎，加锁快、无死锁、锁定粒度大，发生锁冲突的概率高，并发最低
			show open tables； --查看哪些表是否被锁
			lock table locktest read; 
			lock table locktest write;
			unlock tables;
			
			 lock table locktest read; 特性
			 当前线程
				 是否可以查询 --能
				 是否可以更新 --不能
				 是否访问其他表 --不能
			 其他线程
				是否可以查询 --不能
				是否可以更新 --处于阻塞状态，等待解锁之后可以更新
				能不能读别的表 --可以查询其他的表
				
			lock table locktest write; 特性
				 当前线程
					 是否可以查询 --能
					 是否可以更新 --能
					 是否访问其他表 --不能
				 其他线程
					是否可以查询 --处于阻塞状态，等待解锁之后可以查询
					是否可以更新 --处于阻塞状态，等待解锁之后可以更新
					能不能读别的表 --可以查询其他的表
			表锁分析：
				Myisam的读写锁调度是写优先，这也是myisam不适合做写为主表的引擎
				因为写锁后，其他线程不能做任何操作，大量更新会使用查询很难得到锁，从而造成永久阻塞
				用在读数据比较多的时候
			
		行锁
			偏向InnoDB存储引擎，开销大，加索慢，会出现死锁，锁定粒度最小，发生锁冲突的概率最低，并发读也最高
				InnoDB与MyISAM最大不同点：一是支持事物，二是默认采用了行级锁
			事物
				ACID属性
					A 原子性：要么全部成功，要么全部失败
					C 一致性：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事物执行之前和执行之后都必须处于一致性状态。
					I 隔离性：多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事物，不能被其他事物的操作所干扰
					D 持久性：已提交事物后，就不能回滚，保存到数据库
			并发事物处理带来的问题
				1、更新丢失
					两个或多个事物选择同一行，然后基于最初选定的值更新该行时，
					由于每个事物都不知道其他事物的存在，就会发生丢失更新问题，
					最后的更新覆盖了其它事物所做的更新
				2、脏读
					read-uncommit 读到了未提交事物的数据
					解决方法：Read committed！读提交，能解决脏读问题
				3、不可重复读
					事物A读取到了事物B已经提交的修改数据
					解决方法：Repeatable read 重复读
				4、重复读
					查询时开启事物，不允许其他事物的update修改操作
				5、幻读
					Serializable
						这种事物隔离几倍效率低下，比较耗数据库性能，一般不使用
					
				查询隔离级别
					select @@global.tx_isolation,@@tx_isolation;
					全局的：set global transaction isolation level read committed;
					当前会话：set session transaction isolation level read committed;
					
			5.5以后，默认开启行锁，事物自动提交
			连接1关闭自动提交 set autocommit = 0;
				连接1执行更新操作：
				自己可以查看到更新的内容
				连接2看不到更新的内容，只有commit后，才能看到更新的内容
			
			连接1、2都关闭自动提交 set autocommit = 0;
				连接1、2更新同一条记录
				连接1执行更新操作
				连接2执行更新操作：会处于阻塞状态，当连接一执行完才会执行
			
			连接1、2都关闭自动提交 set autocommit = 0;
				连接1、2更新不同一条记录
					两个都可以更新成功
					
			索引失效会把行锁变成表锁
			间隙锁：更新范围的中间锁
			如何锁定一行：
				select * from employee where id = 1 for update;
				另外的连接要更改时，只能通过提交事物后更改
				
			show status like 'innodb row lock%';
		页锁
		
		悲观锁
			它对于数据被外界修改持保守态度，认为数据随时会修改，
			所以整个数据处理中需要将数据加锁，悲观锁一般都是依靠关系数据库提供的锁机制
			事实上关系数据库中的行锁，表锁不论是读写锁都是悲观锁
			
		乐观锁
			每次操作的时候认为没有人会修改它，所以不去加锁
			但在更新的时候会去判断在此期间数据有没有被修改，需要用户自己去实现
			才会发生并发抢占资源，只有在提交操作的时候检查是否违反数据完整性
			
		为什么要使用乐观锁：
			对于读操作远多于写操作的时候，大多数都是读取，这时候一个更新操作加锁会阻塞所有读取，减低了吞吐量。
			最后还要释放锁，锁是需要一些开销的，我们只要想方法解决极少量的更新操作的同步问题。
			如果是读写比例差距不是非常大或者你的系统没有响应不及时，吞吐量瓶颈问题，就不要使用乐观锁，增加了复杂度，
			也带来了额外风险
			
			乐观锁的实现方式
				版本号
				时间戳

18、Linux
	touch 文件名称
	压缩文件 tar -zcvf 打包压缩后的文件名 要打包压缩的文件
	z:调用gzip压缩命令
	c:打包文件
	v:显示运行过程
	f:指定文件名
	
	解压文件
		tar -xvf 压缩文件 解压地址
		x：解压文件
	
	vi编辑器
		命令模式： i 或 a,进入输入模式， shif+:,进入低行模式
		插入模式：esc 进入模式
		底行模式：
			:w 保存 
			:q 退出
			:e! 撤销更改，返回到上一次保存的状态
			:q! 不保存强制退出
			:set nu 设置行号
			:wq 保存退出

19、主从复制
		什么是主从复制
			传统数据库中存在的问题，
				1、传统数据库设计时，如果服务器宕机，将不能为用户提供服务导致整个系统崩溃
				2、如果数据库突然宕机，会导致数据丢失
				3、为了防止数据库丢失，要进行实时备份
				冷备份：通过数据库工具进行人为的导出sql，但是手动导出数据可能在中间节点宕机也会造成数据库的丢失
		主从复制
			主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库
			
		主从复制的作用
			1、做数据的热备，作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。
			2、架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器I/O性能
			3、读写分离，使数据库能支撑更大的并发。
		主从复制的原理
			1、数据库有个bin-log二机制文件，记录了所有sql语句
			2、我们的目标就是把主数据的bin-log文件的sql语句复制过来。
			3、让其在从数据relay-log重复日志文件中再执行一次这些sql语句
			4、下面的主从配置就是围绕这个原理配置
			5、具体需要三个线程来操作
				i/o线程去请求主库的binlog,并将得到的binlog日志写道relay log(中继日志) 文件中；
				主库会生成一个log dump线程，用来给从库i/o线程binlog;
				SQL线程，会读取relay log文件中的日志，并解析成具体操作，来实现主从的操作一致
				
				主服务器--》log_dump线程--》IO线程 --》 中继日志 --》SQL线程 --》从服务器
				
		主从复制过程
			主机：my.ini
				log-bin = 
				server-id = 1
				文件编码ANSI
			
			在主服务器发你配一个账号,就像一把钥匙，从服务器拿着这个钥匙，才能到主服务器上来共享主服务器的日志文件
			grant replication slave on *.* 'myxq'@'192.168.0.88' IDENTIFIED BY '123456'
			
			查看主服务器BIN日志的信息
				执行完之后记录下这两值，然后在配置完从服务器之前不要对主服务器进行任何操作
				因为每次操作数据库时这两值会发生改变
				show master status;
					mysql-bin.000003
					612
					
			从机：
				进入从机修改配置文件
					vim /etc/my.cnf
					log-bin=mysql-bin
					server-id=2
					保存修改 重启服务
					
				在从机mysql中执行以下语句
				先在从服务配置完成，启动从服务器
				查看是否配置成功
				停止服务复制
				
20、慢查询日志
		查看是否开启慢查询日志
			show variables like '%slow_query_log%';
		开启
			set global slow_query_log = 1;
			上面操作只对当前数据库生效，如果重启后，则会失效
			如果发永久生效，必须要修改配置文件
				slow_query_log = 1;
				slow_query_log_file = 地址;
		开启慢查询日志后，什么样的sql才会记录到慢查询日志里面呢
			show variables like 'long_query_time'
			set global long_query_time=4;(设置慢查询时长，要断开连接后，才能生效)
			select sleep(4)
			show global status like '%slow_queries%'
		慢日志分析工具
			mysqldumslow -s r -t 10 /database/mysql/mysql06_slow.log
			
		show profile分析 
			概述
				show profile是mysql提供的可以用来分析当前会话中sql语句执行的资源消耗情况的工具，可用于sql调优的测量。
				默认情况下处于关闭状态，并保存最近15此的运行结果。
				把一条sql在mysql当中每一个环节耗费的时候都记录下来
				默认该功能是关闭的，使用前需开启，默认保存最近15次运行的结果
			使用
				1、查看当前的版本是否支持show variables like 'profiling'
				2、打开profile set profiling = on
				3、查看结果 show profiles 
				4、诊断sql
				show profile cpu,block io for query 88;
				当出现以下选项时，要进行优化
				
		全局查询日志
			只允许在测试环境用，不能在生产环境使用
			在测试是，可以把所有执行的sql抓取出来查看
			设置启用
				set global general log = 1;
				set global log_output = 'TABLE'
				此后所编写的sql语句将会记录到mysql库里的general_log表中。
					select * from mysql.general_log;
					mysql -u root -p1234 --default-character-set=utf-8;
					
1、面试问题

--oracle模糊查询
SELECT * FROM DEPT_P WHERE DEPT_NAME LIKE CONCAT('%',CONCAT('1', '%'));

SELECT * FROM DEPT_P WHERE DEPT_NAME LIKE '%' || '1'|| '%';

SELECT * FROM DEPT_P WHERE DEPT_NAME LIKE '%研发%';

--mysql模糊查询
 SELECT * FROM dept WHERE dname LIKE "%" '研发' "%";
 
 SELECT * FROM dept WHERE dname LIKE CONCAT('%', '研发', '%');
 
 SELECT * FROM dept WHERE dname LIKE %研发%;
 
 SELECT * FROM dept WHERE dname LIKE '%' '研发' '%';
 

 mybatis中#{}和${}区别

1、#{}是经过预处理编译后，通过set方法给sql参数设值，${}是直接把参数拼接到sql中
2、#{}可以防止sql注入，${}不能很好的防止sql注入，两者都可以使用时，建议使用#{}
3、当sql中需要动态获取表或者动态获取排序字段时，可以使用${} 


mysql建表语句
CREATE TABLE USER(
  user_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT '主键ID',
  user_name VARCHAR(255) NOT NULL COMMENT '用户名',
  PASSWORD VARCHAR(255) NOT NULL COMMENT '密码',
  phone VARCHAR(255) NOT NULL COMMENT '电话'
) COMMENT '用户信息' ENGINE=INNODB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8;

mysql 建表语句
create table user (
 userid bigint(10) not null primary key auto_increment comment '用户ID',
 username varchar(255) not null comment '用户名',
 mobile varchar(20) comment '手机号码',
 password varchar(100) not null comment '密码',
 status char(1) not null DEFAULT '0' comment '状态 0 正常 1 冻结 2 删除',
 deptid bigint(10) not null comment '机构ID',
 createtime timestamp NOT NULL comment '创建时间',
 updatetime timestamp NOT NULL comment '更新时间'
) comment '用户表';

--查看数据是否开启大小写
show Variables like '%table_names'

--添加约束
alter table data_authority add foreign key(userid) references user(userid);
alter table data_authority add constraint fk_dataauth_userid  foreign key(userid) references user(userid);

create table if not exists data_authority(
 userid bigint(10) not null comment '用户ID',
 deptid bigint(10) not null comment '机构ID',
 foreign key(userid) references user(userid)
) comment '数据权限维护表' engine=innodb default charset=utf8;


create table if not exists data_authority(
 userid bigint(10) not null comment '用户ID',
 deptid bigint(10) not null comment '机构ID',
 constraint fk_dataauth_userid foreign key(userid) references user(userid),
 constraint fk_dataauth_deptid foreign key(deptid) references dept(deptid)
) comment '数据权限维护表' engine=innodb default charset=utf8;

--查询当前时间戳
select CURRENT_TIMESTAMP from dual;
--删除表字段
alter table dept drop column userid;







			

	
			
		
		
	
	
	
	