微服务是什么？
1、将单个应用拆分成一组小型服务开发的一种方法
2、每种应用程序都应用在自己的进程中
3、每种应用程序都可以有自己独立的数据库

微服务 
maven项目中的每一个小moudle，强调的是一个一个个体，每个个体完成一个功能。

微服务架构
一种架构模式
1、将单个应用拆分成一组小型服务开发的一种方法
2、每种应用程序都应用在自己的进程中
3、每种应用程序都可以有自己独立的数据库

微服务优缺点
优点
每个服务足够内聚，足够小，关注一个指定的业务功能和业务需求
开发简单，开发效率高，一个服务只干一件事
服务是松耦合的
微服务能使用不同的语言开发
易于和第三方集合，微服务允许容易且灵活的方式集成自动部署
微服务只是业务逻辑的代码，不会和HTML\CSS或其他界面组合混合
每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库

缺点
开发人员处理分布式系统的复杂性
多服务运维难度
系统部署依赖
服务间通信成本
数据一致性
系统集成测试
性能监控

开发模式
1、前后端分离
2、全栈工程师

微服务技术栈
多种技术的集合

微服务架构，需要有哪些维度？
服务治理
服务注册
服务调用
服务负载均衡
服务监控

服务开发 springboot spring springmvc
服务配置与管理 Netflix公司的Archaius 阿里的Dimond
服务注册


为什么选择springcould作为微服务架构

各种维度的技术都拥有，配套使用

什么是springCould
分布式微服务架构下的一站式解决方案，是各个微服务架构落地的集合体，俗称微服务全家桶
基于springboot提供了一套微服务解决方案，包括服务注册与发现、配置中心、熔断等组件。

springcould和springboot是什么关系
springboot专注于快速方便的开发单个个体微服务
springcould是关注全局的微服务协调整理治理框架，它将springboot开发的一个个单体微服务整合并管理起来。
springboot可以离开springcould单独使用，springcould离不开springboot单独使用。
springcould偏宏观，springbooot偏微观


Eureka是什么
是netflix的一个子模块，是一个基于rest的服务，用于定位服务以及发现服务，只需要使用服务的标识符，就可以访问到服务，不需要修改服务调用的配置文件，
功能类使dubbo的注册中心，zookeeper。

原理

注册服务器  注册客户端

生产者在注册服务器注册，消费者在注册服务消费

三大主角
注册服务器  注册生产者 注册消费者



eureka-7001

eurekaProvider
8001修改 注册进入服务中心

1、服务名称修改
2、ip修改
3、链接跳转修改页面
8001pom文件修改

eureka自我保护 :好死不如赖活着，某一个时刻一个微服务不可用了，eureka不会立刻清理，
依旧会对该服务的信息进行保护  默认时间是（90秒） 可以禁用保护机制

eureka遵循AP

服务发现  discovery

80 修改

eureka集群配置服务
7001 7002 7003 8001
  
RDBMS (orcale/mysql/sqlServer) => ACID
NOSQL (REDIS/MOGODB) CAP 强一致  高可用 分区容错性


任何系统理论上只能满足一个：
CAP 强一致  高可用 分区容错性

zookeeper和eureka区别
zookeeper 保证CP master 垮掉后会进行leader选举，选举需要时间30s-120s
EUREKA 保证AP 各个节点平等
Eureka不会因为网络问题导致全部节点挂掉，会保持部分节点可用，zookeeper会导致全部节点挂掉
针对整个淘宝网站，1111当天，选择AP实现

eureka和zookeeper区别


-==============================
ribbon负载均衡
实现的一套客户端负载均衡的工具
主要功能是提供客户端的软件负载均衡算法

能干什么
负载均衡
集中LB
进程内LB
官网资料

ribbon配置
修改 80

ribbon负载均衡算法
轮巡算法
ribbon 核心组件IRule
7个自带算法

ribbon自定义策略算法
自定义的算法类不能放在@compantScan包及其子包下
myselfRule
自定义规则深度解析


Feign负载均衡
1、大部分的大家都可以介绍，直接调用我们的微服务来进行访问

2、大家目前都习惯面向接口编程，比如WebService接口，比如我们的Dao接口，这个已经是大家的规范。
2.1 微服务名字获得调用地址
2.2 通过接口+注解，，获得我们的调用接口

适应社区其他程序员，通过接口+注解方式

面向接口调用微服务

只需要创建一个接口，然后在上面添加注解即可

Feign集成了Ribbon
利用Ribbon维护了M-D的服务列表信息，并且通过轮询实现了客户端的负载均衡，而在Ribbon不同的是，
通过feign只需要定义服务绑定接口且以声明方式的方法，优雅而简单的实现了服务调用
（之前是Ribbon+RestTemplate）

创建feign项目

修改api

--====================================
hystrix 断路器
分布式面临的问题
服务互相依赖，有可能出现服务雪崩
对依赖进行隔离，不能让一个失败，而产生雪鹏。

是什么
是一个用于处理分布式系统的延迟和容错开源库
是一种保护机制

能干什么
服务降级
服务熔断


服务熔断
是对应雪崩效应的一种微服务链路保护机制，
当扇出
会进行服务降级，熔断该节点微服务的调用，快速返回调用错误的信息

新建 hystrix-8001
启动3个er
启动熔断服务
启动消费者consumer-dept-80

如果出校异常，则跳到熔断机制的方法

服务降级
整体资源快不够了，先将某些资源关掉，等资源够了再开启
A B C 三个服务，A资源不够用了，C支行A，先把C关闭

修改 api工程

aop面向编程  接口+注解处理
新建一个DeptClientServiceFallbackFactory implents FallbackFactory<DeptClientService>
实现和controller解耦


修改dept-feign  yml 增加hystrix
启动三个er 启动provider-dept-8001服务 启动consumer-dept-80
服务降级是客户端，不在服务端


服务熔断和服务降级总结
服务熔断：一般是某个服务故障或者异常引起，类使显示世界中的“保险丝”，当某个异常条件被
触发，直接熔断整个服务，而不是一致等到此服务超时。
服务降级：AOP 做成一个面向切面编程接口，使用接口+注解的方式使用

一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，
此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。
这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强

服务监控hystrixDashboard

hystrix还提供了准实时的调用监控，对微服务图形化监控

新建hystrixdashboard工程
8001/8002/8003都需要监控依赖配置  加入监控完善信息
启动 hystrixdashboard 访问该服务
http://localhost:9001/hystrix

启动三个er  启动dept-hystrix-8001 启动 hystrixdashboard

localhost:8001/hystrix.stream

一圈：绿色 --》 红色
一线
7色

---=================================================
zuul路由网关
是什么
zuul包含了对请求的路由和过滤两个最主要的功能
能干嘛
提供= 代理+路由+过滤三大功能
zuul服务最终还是会注册进Eureka
官网资料

路由基本配置
新建gateway

hosts修改  myzuul.com
启动
三个eureka集群
一个服务提供类8001
一个路由
访问路由：http://myzuul.com:9527/microservicecloud-dept/dept/get/2

修改hosts127.0.0.1 myzuul.com

路由访问映射规则
9527 修改映射

原真实服务名恢复

zuul:
  #ignored-services: microservicecloud-dept
  prefix: /atguigu
  ignored-services: "*"
  routes:
    mydept.serviceId: microservicecloud-dept
    mydept.path: /mydept/**

设置公共前缀

--====================================================================
springcloud config 分布式配置中心

springCloud config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器
为各个不同微服务应用的所有环境提供了一个中心化的外部配置

怎么玩

分为服务端 和客户端

客户端则是通过指定的配置中心管理应用资源


现在github上面新建一个
microservicecloud-config


git clone 从github

application.yml 保存成utf-8模式

git add .
git commit -m "init yml"
git push origin master 


新建config-3344

修改hosts文件  config-3344.com

访问地址：config-3344.com:3344/application-dev.yml

config-3344.com:3344/application/dev/master

config-3344.com:3344/application/master/application-dev.xml

客户端的测试和配置
新建microservicecloud-config-client.yml
新建config-3355
bootstrap.yml 是系统级的，优先级最高

application.yml 是用户级的


启动3344 自测
启动3355 

client-config.com:8201/config

client-config.com:8202/config


新建工程config-7001
新建工程config-8001



第一季总结/第二季展望
阶段一：单机集中构建网站
阶段二：应用服务器配置集群
阶段二：nginx+应用服务器配置集群
阶段三：nginx+应用服务器配置集群+HA
阶段四：



eureka作用是什么？
是一个基于rest的服务，主要是用于定位服务和发现服务。
eureka包括哪些东西？
Server Center（服务注册中心） provider(服务注册者) consumer(服务消费者)

eureka自我保护 :好死不如赖活着，某一个时刻一个微服务不可用了，eureka不会立刻清理，
依旧会对该服务的信息进行保护  默认时间是（90秒） 可以禁用保护机制
eureka自我保护是指什么？

eureka：遵循高可用性、分区容错性
eureka的高可用性和分区容错性是指什么？
zookeeper和eureka区别
zookeeper 保证CP master 垮掉后会进行leader选举，选举需要时间30s-120s
EUREKA 保证AP 各个节点平等
Eureka不会因为网络问题导致全部节点挂掉，会保持部分节点可用，zookeeper会导致全部节点挂掉
针对整个淘宝网站，1111当天，选择AP实现

ribbon主要是实现负载均衡
主要的策略是
轮巡策略、随机策略、权重策略、自定义策略

Feign实现负载均衡
主要是通过注解+接口的方式处理负载均衡的调用

hystrix 熔断器
分布式存在一个问题，服务相互依赖，如果一个服务挂掉，容易引起阻塞，会产生雪崩。
是一个用于处理分布式系统的延迟和容错开源库
是一种保护机制
能干什么
产生服务熔断
产生服务降级

什么是服务熔断？
服务熔断
是对应雪崩效应的一种微服务链路保护机制，
当扇出
会进行服务降级，熔断该节点微服务的调用，快速返回调用错误的信息

服务降级
整体资源快不够了，先将某些资源关掉，等资源够了再开启

服务熔断和服务降级总结
服务熔断：一般是某个服务故障或者异常引起，类使显示世界中的“保险丝”，当某个异常条件被
触发，直接熔断整个服务，而不是一致等到此服务超时。
服务降级：AOP 做成一个面向切面编程接口，使用接口+注解的方式使用

一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，
此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。
这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强


hystrixDashboard 服务监控图形化界面

zuul路由网关
是什么
zuul包含了对请求的路由和过滤两个最主要的功能
能干嘛
提供= 代理+路由+过滤三大功能


springcloud config 分布式配置中心





















